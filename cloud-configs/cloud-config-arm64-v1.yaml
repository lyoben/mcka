#cloud-config
#apt_mirror: http://sg.archive.ubuntu.com/ubuntu/

apt:
  preserve_sources_list: false
  sources:
    byobu-ppa:
      source: "deb [arch=arm64 signed-by=$KEY_FILE] http://ppa.launchpad.net/byobu/ppa/ubuntu focal main"
      keyid: A42A415B4677D2D22EB05723CF5E7496F430BBA5
    git:
      source: "ppa:git-core/ppa"
    kubernetes.list:
      source: "deb [signed-by=$KEY_FILE] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /"
      keyid: DE15B14486CD377B9E876E1A234654DA9A296436
    docker-ce.list:
      source: "deb [arch=arm64 signed-by=$KEY_FILE] https://download.docker.com/linux/ubuntu $RELEASE stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    terraform.list:
      source: "deb [arch=arm64 signed-by=$KEY_FILE] https://apt.releases.hashicorp.com $RELEASE main"
      keyid: 798AEC654E5C15428C8E42EEAA16FCBCA621E701
    githubcli.list:
      source: "deb [arch=arm64 signed-by=$KEY_FILE] https://cli.github.com/packages stable main"
      keyid: 2C6106201985B60E6C7AC87323F3D4EA75716059

packages:
 - apt-transport-https
 - ca-certificates
 - curl
 - software-properties-common
 - jq
 - docker-ce
 - docker-ce-cli
 - containerd.io
 - kubectl=1.33.0-*
 - terraform
 - genisoimage
 - xorriso
 - pipx
 - figlet
 - gh
 - make
 - nfs-kernel-server

package_update: true
package_upgrade: true
package_reboot_if_required: false

mount_default_fields: [ None, None, "auto", "defaults,nobootwait", "0", "2" ]

groups:
  - ubuntu

users:
  - default
  - name: ubuntu
    gecos: ubuntu
    primary_group: ubuntu
    groups: docker
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    # ssh_authorized_keys:
    #   - ssh-ed25519 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY

ssh_pwauth: true

chpasswd:
  expire: false
  users:
    - name: ubuntu
      password: ubuntu
      type: text

byobu_by_default: disable

locale: en_SG.UTF-8
locale_configfile: /etc/default/locale

resize_rootfs: True

final_message: "The system is finally up, after $UPTIME seconds"
timezone: Asia/Singapore

ntp:
  enabled: true

ssh_deletekeys: True
ssh_genkeytypes: [rsa, ecdsa, ed25519]
ssh_fp_console_blacklist: [ed25519]
ssh_key_console_blacklist: [ssh-dss]

# --- Developer environment and tooling setup ---
write_files:
- content: |
      #!/usr/bin/env bash

      pushd /tmp
        # Install huber as ubuntu user
        su - ubuntu -c "curl -sfSL https://raw.githubusercontent.com/innobead/huber/main/hack/install.sh | sh -"

        # Install Kind
        curl -LO "https://kind.sigs.k8s.io/dl/v0.27.0/kind-linux-arm64"
        curl -LO "https://kind.sigs.k8s.io/dl/v0.27.0/kind-linux-arm64.sha256sum"
        echo "$(cat kind-linux-arm64.sha256sum)" | sha256sum --check
        install -o root -g root -m 0755 kind-linux-arm64 /usr/local/bin/kind

        # Install K9s
        curl -LO "https://github.com/derailed/k9s/releases/download/v0.50.4/k9s_Linux_arm64.tar.gz"
        curl -LO "https://github.com/derailed/k9s/releases/download/v0.50.4/checksums.sha256"
        sha256sum --check --ignore-missing checksums.sha256
        tar zxvf k9s_Linux_arm64.tar.gz k9s
        install -o root -g root -m 0755 k9s /usr/local/bin/k9s

        # Install Helm
        curl -LO "https://get.helm.sh/helm-v3.17.3-linux-arm64.tar.gz"
        curl -LO "https://get.helm.sh/helm-v3.17.3-linux-arm64.tar.gz.sha256sum"
        sha256sum --check helm-v3.17.3-linux-arm64.tar.gz.sha256sum
        tar zxvf helm-v3.17.3-linux-arm64.tar.gz linux-arm64/helm
        install -o root -g root -m 0755 linux-arm64/helm /usr/local/bin/helm

        # Install Minikube
        curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-arm64
        curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-arm64.sha256
        echo "$(cat minikube-linux-arm64.sha256)  minikube-linux-arm64" | sha256sum --check
        install -o root -g root -m 0755 minikube-linux-arm64 /usr/local/bin/minikube

        # Install Cert-Manager CLI (cmctl)
        curl -LO https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_linux_arm64.tar.gz
        curl -LO https://github.com/cert-manager/cmctl/releases/latest/download/checksums.txt
        sha256sum --check --ignore-missing checksums.txt
        tar zxvf cmctl_linux_arm64.tar.gz cmctl
        install -o root -g root -m 0755 cmctl /usr/local/bin/cmctl

        # Install yq
        curl -LO https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64
        curl -LO https://github.com/mikefarah/yq/releases/latest/download/checksums
        echo "$(grep linux checksums | grep amd | grep -v tar | awk '{print $19}')  yq_linux_arm64" | sha256sum --check
        install -o root -g root -m 0755 yq_linux_arm64 /usr/local/bin/yq
      popd

      # Directories for ubuntu user
      mkdir -p /home/ubuntu/Projects/kind
      mkdir -p /home/ubuntu/.local/bin

      # Shell aliases and completions
      cat <<'EOF' | tee -a /home/ubuntu/Projects/kind/bashrc
      alias k=kubectl
      alias mk=minikube
      source <(k completion bash)
      complete -o default -F __start_kubectl k
      source <(kind completion bash)
      source <(helm completion bash)
      source <(k9s completion bash)
      source <(fzf --bash)
      if command -v huber > /dev/null; then
        source <(huber completions bash)
      fi
      source <(minikube completion bash)
      complete -o default -F __start_minikube mk
      eval "$(direnv hook bash)"
      eval "$(gh completion -s bash)"
      EOF

      # Byobu custom keybindings
      #mkdir /home/ubuntu/.byobu/
      #cat <<EOF > /home/ubuntu/.byobu/keybindings.tmux
      #unbind-key -n C-a
      #set -g prefix ^A
      #set -g prefix2 F12
      #bind a send-prefix
      #EOF

      # Vim with Dracula theme
      cat <<EOF > /home/ubuntu/Projects/kind/vimrc
      let g:dracula_italic = 0
      packadd! dracula
      syntax enable
      colorscheme dracula
      set nu rnu
      autocmd FileType yaml,yml,sh setlocal ts=2 sts=2 sw=2 et ai
      set pastetoggle=<F10>
      EOF
      mkdir -p /home/ubuntu/.vim/pack/themes/start
      pushd /home/ubuntu/.vim/pack/themes/start
        git clone -n --depth=1 --filter=tree:0 https://github.com/dracula/vim.git dracula
        pushd /home/ubuntu/.vim/pack/themes/start/dracula
          git sparse-checkout set --no-cone after autoload colors docs
          git checkout
          rm -rf .git
        popd
      popd

      # --- Helm add-on helper scripts ---
      cat <<EOF | tee -a /home/student/Projects/kind/kind.yaml
      kind: Cluster
      apiVersion: kind.x-k8s.io/v1alpha4
      networking:
      disableDefaultCNI: false # enable kindnet
      podSubnet: 192.168.0.0/16 # set to Calico's default subnet
      kubeProxyMode: "nftables" # options: iptables, nftables, none
      nodes:
      - role: control-plane
        image: kindest/node:v1.31.12@sha256:0f5cc49c5e73c0c2bb6e2df56e7df189240d83cf94edfa30946482eb08ec57d2
      - role: worker
        image: kindest/node:v1.31.12@sha256:0f5cc49c5e73c0c2bb6e2df56e7df189240d83cf94edfa30946482eb08ec57d2
      - role: worker
        image: kindest/node:v1.31.12@sha256:0f5cc49c5e73c0c2bb6e2df56e7df189240d83cf94edfa30946482eb08ec57d2
      EOF
      #
      cat <<OUTEOF > /home/ubuntu/.local/bin/nfs-storage-class.sh
      #!/usr/bin/env bash
      helm repo add csi-driver-nfs https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/charts
      helm install csi-driver-nfs csi-driver-nfs/csi-driver-nfs --namespace kube-system --version 4.11.0
      cat <<EOF | kubectl apply -f -
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: nfs-csi
      provisioner: nfs.csi.k8s.io
      parameters:
        server: 10.254.254.1
        share: /srv
      reclaimPolicy: Delete
      volumeBindingMode: Immediate
      allowVolumeExpansion: true
      mountOptions:
        - nfsvers=4.1
      EOF
      OUTEOF

      cat <<OUTEOF > /home/ubuntu/.local/bin/metallb.sh
      #!/usr/bin/env bash
      helm repo add metallb https://metallb.github.io/metallb
      helm install metallb metallb/metallb --namespace metallb-system --create-namespace
      kubectl wait --namespace metallb-system \
                   --for=condition=ready pod \
                   --selector=app.kubernetes.io/name=metallb \
                   --timeout=120s
      cat <<EOF | kubectl apply -f -
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: default
        namespace: metallb-system
      spec:
        addresses:
        - 10.254.254.248-10.254.254.254
      ---
      apiVersion: metallb.io/v1beta1
      kind: L2Advertisement
      metadata:
        name: default
        namespace: metallb-system
      EOF
      OUTEOF

      cat <<EOF > /home/ubuntu/.local/bin/metrics-server.sh
      #!/usr/bin/env bash
      helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
      helm install metrics-server metrics-server/metrics-server \
        --set args={--kubelet-insecure-tls=true}
      kubectl wait --namespace=default \
                   --for=condition=ready pod \
                   --selector=app.kubernetes.io/instance=metrics-server \
                   --timeout=180s
      EOF

      cat <<EOF > /home/ubuntu/.local/bin/ingress-nic.sh
      #!/usr/bin/env bash
      helm repo add nginx-stable https://helm.nginx.com/stable
      helm install main nginx-stable/nginx-ingress \
        --set controller.watchIngressWithoutClass=true \
        --set controller.service.externalTrafficPolicy=Cluster \
        --set controller.ingressClass.name=nginx-oss
      kubectl wait \
        --namespace=default \
        --for=condition=ready pod \
        --selector=app.kubernetes.io/name=nginx-ingress \
        --timeout=90s
      EOF

      cat <<EOF > /home/ubuntu/.local/bin/ingress-kic.sh
      #!/usr/bin/env bash
      helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      helm install ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.ingressClassResource.name=ingress-nginx
      EOF

      cat <<EOF > /home/ubuntu/.local/bin/cert-manager.sh
      #!/usr/bin/env bash
      helm repo add jetstack https://charts.jetstack.io
      helm install \
        cert-manager jetstack/cert-manager \
        --namespace cert-manager \
        --create-namespace \
        --set crds.enabled=true
      EOF

      # --- Kubernetes manifests ---
      cat <<EOF > /home/ubuntu/Projects/kind/ingress.yaml
      (original ingress manifest here)
      EOF

      cat <<EOF > /home/ubuntu/Projects/kind/ingress-tls.yaml
      (original ingress-tls manifest here)
      EOF

      cat <<EOF > /home/ubuntu/Projects/kind/san.cnf
      (original SAN config here)
      EOF

      cat <<EOF > /home/ubuntu/Projects/kind/selfsigned-issuer.yaml
      (original issuer manifest here)
      EOF

      cat <<EOF > /home/ubuntu/Projects/kind/ca-certificate.yaml
      (original CA cert manifest here)
      EOF

      cat <<EOF > /home/ubuntu/Projects/kind/ca-issuer.yaml
      (original CA issuer manifest here)
      EOF

      cat <<EOF > /home/ubuntu/Projects/kind/ca-cluster-issuer.yaml
      (original cluster issuer manifest here)
      EOF

      # K9s skin (Monokai)
      mkdir -p /home/ubuntu/.config/k9s/skins/
      curl -sSL https://raw.githubusercontent.com/derailed/k9s/master/skins/monokai.yaml -o /home/ubuntu/.config/k9s/skins/monokai.yaml

      chown -R ubuntu:ubuntu /home/ubuntu

      # Pyenv setup for ubuntu
      pushd /home/ubuntu
        git clone --depth 1 https://github.com/pyenv/pyenv.git .pyenv
        PYENV_MODULES=(doctor installer update virtualenv which-ext)
        for module in "${PYENV_MODULES[@]}"; do
          git clone --depth 1 https://github.com/pyenv/pyenv-"$module".git /home/ubuntu/.pyenv/plugins/pyenv-"$module"
        done
      popd

      # Pyenv dependencies
      cat <<'EOF' | tee /home/ubuntu/.local/bin/install-pyenv-dependencies.sh
      #!/usr/bin/env bash
      sudo apt update
      sudo apt -y install \
               build-essential \
               libssl-dev zlib1g-dev \
               libbz2-dev \
               libreadline-dev \
               libsqlite3-dev \
               curl \
               git \
               libncursesw5-dev \
               xz-utils \
               tk-dev \
               libxml2-dev \
               libxmlsec1-dev \
               libffi-dev \
               liblzma-dev
      EOF

      chmod +x /home/ubuntu/.local/bin/*
      cat /home/ubuntu/Projects/kind/bashrc >> /home/ubuntu/.bashrc
      cp /home/ubuntu/Projects/kind/vimrc /home/ubuntu/.vimrc

      # Python tools via pipx
      su -c "pipx install yamllint" - ubuntu
      su -c "pipx install pipenv" - ubuntu

      chown -R ubuntu:ubuntu /home/ubuntu
  owner: root:root
  path: /usr/local/bin/1-setup.sh
  permissions: "0755"

# --- Docker networking and system configs ---
- content: |
      #!/usr/bin/env bash
      docker network create \
        --driver=bridge \
        --subnet=10.254.254.0/24 \
        --gateway=10.254.254.1 \
        --opt "com.docker.network.bridge.enable_ip_masquerade"="true" \
        --opt "com.docker.network.driver.mtu"="1500" \
        --ipv6 --subnet=fc00:f853:ccd:e793::/64 \
        kind
  owner: root:root
  path: /usr/local/bin/docker-network-kind.sh
  permissions: "0755"

- content: |
        fs.inotify.max_user_watches = 524288
        fs.inotify.max_user_instances = 512
  owner: root:root
  path: /etc/sysctl.d/99-kind.conf
  permissions: "0644"

- content: |
        {
          "features": {
            "containerd-snapshotter": true
          }
        }
  owner: root:root
  path: /etc/docker/daemon.json
  permissions: "0644"

- content: |
        /srv 10.254.254.0/24(rw,async,no_subtree_check,no_root_squash)
  owner: root:root
  path: /etc/exports
  permissions: "0644"

# --- Commands executed at the end of cloud-init ---
runcmd:
 - apt-get -y purge nano
 - apt-get -y autoremove
 - /usr/local/bin/docker-network-kind.sh
 - systemctl restart docker.service
 - /usr/local/bin/1-setup.sh
 - chown -R ubuntu:ubuntu /home/ubuntu
 - docker pull kindest/node:v1.33.0@sha256:91e9ed777db80279c22d1d1068c091b899b2078506e4a0f797fbf6e397c0b0b2

power_state:
 delay: now
 mode: reboot
 message: Rebooting machine
